<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title><%= title %></title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      padding: 2em;
      background: #f4f7fa;
      color: #333;
    }
    form {
      max-width: 1000px;
      margin: auto;
      background: #fff;
      padding: 2em;
      border-radius: 12px;
      box-shadow: 0 0 10px rgba(0,0,0,0.05);
    }
    input, textarea, select, button {
      width: 100%;
      padding: 0.7em;
      border: 1px solid #ccc;
      border-radius: 8px;
      margin-top: 0.3em;
      font-size: 1em;
    }
    label {
      font-weight: bold;
      margin-top: 1.2em;
      display: block;
    }
    h1 {
      text-align: center;
      margin-bottom: 1em;
    }
    .section {
      border: 1px solid #d0d0d0;
      padding: 1.5em;
      border-radius: 10px;
      margin-top: 2em;
      background: #fafafa;
    }
    .row {
      display: flex;
      gap: 1em;
      margin-top: 1em;
    }
    .half {
      flex: 1;
    }
    img {
      margin: 0.5em;
      border-radius: 10px;
      object-fit: cover;
      border: 1px solid #ddd;
    }
    .thumbnail {
      width: 150px;
      height: 100px;
    }
    button {
      background-color: #007bff;
      color: white;
      border: none;
      cursor: pointer;
      margin-top: 1em;
      transition: 0.3s;
    }
    button:hover {
      background-color: #0056b3;
    }
    .file-label {
      margin-top: 1em;
      background: #e0e7ff;
      border: 1px dashed #6b7cff;
      color: #444;
      text-align: center;
      padding: 1em;
      cursor: pointer;
      border-radius: 10px;
      transition: 0.3s;
    }
    .file-label:hover {
      background: #d0d9ff;
    }
    canvas {
      max-width: 100%;
      margin-top: 1em;
    }
    .note {
      font-size: 0.9em;
      color: #666;
      margin-top: 0.5em;
    }
    #imagePreviewContainer img {
  width: 200px;
  height: 130px;
  position: relative;
}

.image-wrapper {
  position: relative;
  display: inline-block;
  margin: 0.5em;
}

.image-wrapper img {
  border-radius: 10px;
  object-fit: cover;
  border: 1px solid #ccc;
  width: 200px;
  height: 130px;
}

.image-wrapper .delete-btn {
  position: absolute;
  top: 4px;
  right: 6px;
  background: rgba(255, 0, 0, 0.75);
  color: white;
  padding: 0.2em 0.5em;
  font-size: 0.8em;
  border-radius: 5px;
  cursor: pointer;
  display: none;
}

.image-wrapper:hover .delete-btn {
  display: block;
}

.image-wrapper .delete-btn {
  position: absolute;
  top: 4px;
  right: 6px;
  background: rgba(255, 0, 0, 0.75);
  color: white;
  padding: 0.2em 0.5em;
  font-size: 0.8em;
  border-radius: 5px;
  cursor: pointer;
  display: none;
  user-select: none;
}

.image-wrapper:hover .delete-btn {
  display: block;
}
  </style>
</head>
<form method="POST" action="<%= country ? '/admin/countries/' + country._id + '/edit' : '/admin/countries/create' %>" enctype="multipart/form-data" onsubmit="prepareData()">
  <h1><%= title %></h1>

  <label>Название</label>
  <input type="text" name="name" value="<%= country?.name || '' %>" required>

  <label>Столица</label>
  <input type="text" name="capital" value="<%= country?.capital || '' %>" required>

  <!-- Загрузка флага -->
  <label for="flagInput" class="file-label">Флаг (PNG, JPG)</label>
  <input type="file" name="flag" id="flagInput" accept="image/*" style="display:none" onchange="handleFlagSelect(event)">

  <div id="flagPreviewContainer">
    <% if (country?.flagPath) { %>
      <div class="image-wrapper" id="flagWrapper">
        <img src="<%= country.flagPath %>" alt="Флаг" class="thumbnail" id="flagPreview">
        <span class="delete-btn" onclick="removeFlag()">удалить</span>
      </div>
      <input type="hidden" name="oldFlagPath" value="<%= country.flagPath %>">
    <% } %>
  </div>

  <label class="file-label">Фотографии страны (можно несколько)
    <input type="file" name="images" id="imageInput" multiple accept="image/*" style="display:none" onchange="handleImageSelect(event)">
  </label>

  <div id="imagePreviewContainer" class="row" style="flex-wrap: wrap;">
    <% if (country?.imagePaths?.length) {
      country.imagePaths.forEach((path, index) => { %>
        <div class="image-wrapper" data-index="<%= index %>">
          <img src="<%= path %>" class="thumbnail" alt="Фото">
          <span class="delete-btn" onclick="removeOldImage(<%= index %>)">удалить</span>
        </div>
      <% });
    } %>
  </div>

  <input type="hidden" name="oldImagePaths" value='<%= JSON.stringify((country && country.imagePaths) || []) %>'>

  <label>Координаты (широта и долгота)</label>
  <div class="row">
    <input class="half" type="number" name="latitude" step="any" placeholder="Широта" value="<%= country?.geography?.latitude || '' %>" required>
    <input class="half" type="number" name="longitude" step="any" placeholder="Долгота" value="<%= country?.geography?.longitude || '' %>" required>
  </div>

  <div class="section">
    <h3>География</h3>
    <label>Континент</label>
    <input type="text" name="continent" value="<%= country?.geography?.continent || '' %>" required>

    <label>Количество морей</label>
    <input type="text" name="seasOceansCount" value="<%= country?.geography?.seasOceansCount || '' %>" required>

    <label>Количество рек</label>
    <input type="text" name="riversCount" value="<%= country?.geography?.riversCount || '' %>" required>

    <label>Количество озёр</label>
    <input type="text" name="lakesCount" value="<%= country?.geography?.lakesCount || '' %>" required>

    <label>Площадь (в км²)</label>
    <input type="text" name="area" step="any" value="<%= country?.geography?.area || '' %>" required>
  </div>

  <div class="section">
    <h3>Экономика</h3>
    <label>ВВП</label>
    <input type="text" name="gdp" step="any" value="<%= country?.economy?.gdp || '' %>" required>

    <label>ВВП на душу населения</label>
    <input type="text" name="gdpPerCapita" step="any" value="<%= country?.economy?.gdpPerCapita || '' %>" required>

    <label>Инфляция (%)</label>
    <input type="number" name="inflation" step="any" value="<%= country?.economy?.inflation || '' %>" required>

    <label>Уровень безработицы (%)</label>
    <input type="number" name="unemployment" step="any" value="<%= country?.economy?.unemployment || '' %>" required>

    <label>Средняя зарплата</label>
    <input type="text" name="avgSalary" step="any" value="<%= country?.economy?.avgSalary || '' %>" required>

    <label>История ВВП</label>
    <div id="gdp-history-container"></div>
    <button type="button" onclick="addHistoryPoint('gdp')">Добавить точку</button>
    <input type="hidden" name="gdpHistory" id="gdpHistory">
    <canvas id="gdpChart" height="200"></canvas>
  </div>

  <div class="section">
    <h3>Демография</h3>
    <label>Население</label>
    <input type="text" name="population" value="<%= country?.demographics?.population || '' %>" required>

    <label>Плотность населения</label>
    <input type="text" name="populationDensity" step="any" value="<%= country?.demographics?.populationDensity || '' %>" required>

    <label>Ожидаемая продолжительность жизни</label>
    <input type="text" name="lifeExpectancy" step="any" value="<%= country?.demographics?.lifeExpectancy || '' %>" required>

    <label>История численности населения</label>
    <div id="population-history-container"></div>
    <button type="button" onclick="addHistoryPoint('population')">Добавить точку</button>
    <input type="hidden" name="populationHistory" id="populationHistory">
    <canvas id="populationChart" height="200"></canvas>
  </div>

  <div class="section">
    <h3>Разделы</h3>
    <div id="sections-container">
      <% if (country?.sections?.length) {
        country.sections.forEach(section => { %>
          <div class="section">
            <input type="text" name="sectionTitles" placeholder="Заголовок" value="<%= section.title %>">
            <textarea name="sectionContents" placeholder="Содержимое"><%= section.content %></textarea>
          </div>
      <% }) } else { %>
        <div class="section">
          <input type="text" name="sectionTitles" placeholder="Заголовок">
          <textarea name="sectionContents" placeholder="Содержимое"></textarea>
        </div>
      <% } %>
    </div>
    <button type="button" onclick="addSection()">Добавить раздел</button>
  </div>

  <input type="hidden" name="sections" id="sections-json">
  <input type="hidden" name="customFields" id="customFields-json">
  <button type="submit">Сохранить</button>
</form>

  <script>
    function addSection() {
      const container = document.getElementById('sections-container');
      const div = document.createElement('div');
      div.classList.add('section');
      div.innerHTML = `
        <input type="text" name="sectionTitles" placeholder="Заголовок">
        <textarea name="sectionContents" placeholder="Содержимое"></textarea>
      `;
      container.appendChild(div);
    }

    function addCustomField() {
      const container = document.getElementById('custom-fields');
      const div = document.createElement('div');
      div.classList.add('row');
      div.innerHTML = `
        <input class="half" type="text" name="customFieldKeys" placeholder="Название поля">
        <input class="half" type="text" name="customFieldValues" placeholder="Значение">
      `;
      container.appendChild(div);
    }

    function prepareData() {
      const titles = document.getElementsByName('sectionTitles');
      const contents = document.getElementsByName('sectionContents');
      const sections = [];
      for(let i=0; i<titles.length; i++) {
        const title = titles[i].value.trim();
        const content = contents[i].value.trim();
        if(title || content) sections.push({title, content});
      }
      document.getElementById('sections-json').value = JSON.stringify(sections);

      const keys = document.getElementsByName('customFieldKeys');
      const values = document.getElementsByName('customFieldValues');
      const customFields = {};
      for(let i=0; i<keys.length; i++) {
        const key = keys[i].value.trim();
        const value = values[i].value.trim();
        if(key) customFields[key] = value;
      }
      document.getElementById('customFields-json').value = JSON.stringify(customFields);
    }

    let gdpChart = null;
    let populationChart = null;

    function updateChart(type) {
      const jsonStr = document.querySelector(`[name="${type}History"]`).value;
      try {
        const data = JSON.parse(jsonStr);
        const ctx = document.getElementById(`${type}Chart`).getContext('2d');
        const labels = data.map(d => d.year);
        const values = data.map(d => d.value);

        const config = {
          type: 'line',
          data: {
            labels,
            datasets: [{
              label: type === 'gdp' ? 'ВВП' : 'Население',
              data: values,
              fill: false,
              borderColor: type === 'gdp' ? '#007bff' : '#28a745',
              tension: 0.3
            }]
          }
        };

        if (type === 'gdp') {
          if (gdpChart) gdpChart.destroy();
          gdpChart = new Chart(ctx, config);
        } else {
          if (populationChart) populationChart.destroy();
          populationChart = new Chart(ctx, config);
        }
      } catch (err) {
        console.warn(`Невалидный JSON в поле ${type}History`);
      }
    }

    // Автозагрузка графиков при открытии страницы
    window.onload = () => {
      updateChart('gdp');
      updateChart('population');
    }
  </script>
  <script>
  const imageInput = document.getElementById('imageInput');
  const previewContainer = document.getElementById('imagePreviewContainer');
  const deletedImagesInput = document.getElementById('deletedImages');
  let selectedFiles = [];
  let existingImages = <%- JSON.stringify(existingImages || []) %>;
  let deletedImages = [];

  function renderAllImages() {
    previewContainer.innerHTML = '';

    // 1. Сначала отобразим уже загруженные изображения
    existingImages.forEach((url, index) => {
      const wrapper = document.createElement('div');
      wrapper.classList.add('image-wrapper');
      wrapper.innerHTML = `
        <img src="${url}" alt="Существующее изображение">
        <div class="delete-btn" onclick="removeExistingImage(${index})">удалить</div>
      `;
      previewContainer.appendChild(wrapper);
    });

    // 2. Затем новые изображения (selectedFiles)
    selectedFiles.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const wrapper = document.createElement('div');
        wrapper.classList.add('image-wrapper');
        wrapper.innerHTML = `
          <img src="${e.target.result}" alt="Новое изображение">
          <div class="delete-btn" onclick="removeNewImage(${index})">удалить</div>
        `;
        previewContainer.appendChild(wrapper);
      };
      reader.readAsDataURL(file);
    });
  }

  function handleImageSelect(event) {
    const files = Array.from(event.target.files);
    selectedFiles = files;
    renderAllImages();
  }

  function removeNewImage(index) {
    selectedFiles.splice(index, 1);

    const dataTransfer = new DataTransfer();
    selectedFiles.forEach(file => dataTransfer.items.add(file));
    imageInput.files = dataTransfer.files;

    renderAllImages();
  }

  function removeExistingImage(index) {
    const removed = existingImages.splice(index, 1)[0];
    deletedImages.push(removed);
    deletedImagesInput.value = JSON.stringify(deletedImages);
    renderAllImages();
  }

  // Отрисуем при загрузке
  window.addEventListener('DOMContentLoaded', () => {
    renderAllImages();
  });
</script>
<script>
    // Управление превью изображений
    const imagesPreviewContainer = document.getElementById('imagesPreviewContainer');

    function handleImagesSelect(event) {
      const files = event.target.files;
      for (const file of files) {
        const reader = new FileReader();
        reader.onload = e => {
          const div = document.createElement('div');
          div.classList.add('image-wrapper');
          div.dataset.isNew = 'true';

          div.innerHTML = `
            <img src="${e.target.result}" class="thumbnail" alt="Изображение">
            <span class="delete-btn" onclick="removeImage(this)">удалить</span>
          `;
          imagesPreviewContainer.appendChild(div);
        };
        reader.readAsDataURL(file);
      }
    }

    function removeImage(elem) {
      const wrapper = elem.closest('.image-wrapper');
      // Если это старое изображение, добавляем в список удалённых
      if (!wrapper.dataset.isNew) {
        const path = wrapper.dataset.path;
        let deleted = JSON.parse(deletedImagesInput.value);
        if (!deleted.includes(path)) {
          deleted.push(path);
          deletedImagesInput.value = JSON.stringify(deleted);
        }
      }
      wrapper.remove();
    }

    // Перед отправкой формы можно подготовить дополнительные данные
    function prepareData() {
      // Если нужно - сериализовать дополнительные поля, например, динамические секции
      // Здесь можно добавить логику сохранения данных из UI в hidden поля

      // Например, обновить oldImagePaths, чтобы не потерять новые изменения
      const existingImgs = [];
      document.querySelectorAll('#imagesPreviewContainer .image-wrapper').forEach(div => {
        if (!div.dataset.isNew) {
          existingImgs.push(div.dataset.path);
        }
      });
      document.getElementById('oldImagePathsInput')?.setAttribute('value', JSON.stringify(existingImgs));
    }
  </script>
  <script>
function handleFlagSelect(event) {
  const file = event.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function(e) {
    let previewImg = document.getElementById('flagPreview');
    if (!previewImg) {
      const container = document.getElementById('flagPreviewContainer');
      container.innerHTML = `
        <div class="image-wrapper" id="flagWrapper">
          <img src="${e.target.result}" alt="Флаг" class="thumbnail" id="flagPreview">
          <span class="delete-btn" onclick="removeFlag()">удалить</span>
        </div>
      `;
    } else {
      previewImg.src = e.target.result;
    }
  };
  reader.readAsDataURL(file);
}

function removeFlag() {
  const container = document.getElementById('flagPreviewContainer');
  container.innerHTML = '';
  
  const input = document.getElementById('flagInput');
  input.value = '';
  const oldFlagInput = document.querySelector('input[name="oldFlagPath"]');
  if (oldFlagInput) oldFlagInput.remove();
}
</script>
<script>
  window.addEventListener('DOMContentLoaded', () => {
    updateChart('gdp');
    updateChart('population');
  });
</script>
<script>
  let deletedOldImages = [];

  function removeOldImage(index) {
    deletedOldImages.push(index);
    document.getElementById('deletedImages').value = JSON.stringify(deletedOldImages);
    const wrapper = document.querySelector(`.image-wrapper[data-index="${index}"]`);
    if (wrapper) wrapper.remove();
  }
</script>
<script>
  const initialData = {
    gdp: <%- JSON.stringify(country?.economy?.gdpHistory || []) %>,
    population: <%- JSON.stringify(country?.demographics?.populationHistory || []) %>
  };

  function addHistoryPoint(type, year = '', value = '') {
    const container = document.getElementById(`${type}-history-container`);
    const div = document.createElement('div');
    div.classList.add('row');
    div.style.marginBottom = '0.5em';
    div.innerHTML = `
      <input class="half" type="number" placeholder="Год" value="${year}" onchange="updateHistoryJSON('${type}')">
      <input class="half" type="number" placeholder="Значение" value="${value}" onchange="updateHistoryJSON('${type}')">
    `;
    container.appendChild(div);
    updateHistoryJSON(type);
  }

  function updateHistoryJSON(type) {
    const container = document.getElementById(`${type}-history-container`);
    const inputs = container.querySelectorAll('input');
    const data = [];
    for (let i = 0; i < inputs.length; i += 2) {
      const year = parseInt(inputs[i].value);
      const value = parseFloat(inputs[i+1].value);
      if (!isNaN(year) && !isNaN(value)) {
        data.push({ year, value });
      }
    }
    document.getElementById(`${type}History`).value = JSON.stringify(data);
    drawChart(type, data);
  }

  function drawChart(type, data) {
    const ctx = document.getElementById(`${type}Chart`).getContext('2d');
    const labels = data.map(d => d.year);
    const values = data.map(d => d.value);

    const chartRef = type === 'gdp' ? gdpChart : populationChart;
    if (chartRef) chartRef.destroy();

    const newChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels,
        datasets: [{
          label: type === 'gdp' ? 'ВВП' : 'Население',
          data: values,
          borderColor: type === 'gdp' ? '#007bff' : '#28a745',
          fill: false,
          tension: 0.3
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: true
          }
        },
        scales: {
          x: {
            title: {
              display: true,
              text: 'Год'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Значение'
            }
          }
        }
      }
    });

    if (type === 'gdp') gdpChart = newChart;
    else populationChart = newChart;
  }

  document.addEventListener('DOMContentLoaded', () => {
    // Инициализация графиков с данными
    ['gdp', 'population'].forEach(type => {
      initialData[type].forEach(({ year, value }) => {
        addHistoryPoint(type, year, value);
      });
    });
  });

</script>
</body>
</html>